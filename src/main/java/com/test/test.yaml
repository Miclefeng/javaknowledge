apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ingressgateway-auth
  namespace: istio-system
spec:
  workloadLabels:
    app: istio-ingressgateway
    per_connection_buffer_limit_bytes: "209715200"
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        listener:
          portNumber: 8080
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: MERGE
        value:
          per_connection_buffer_limit_bytes: 209715200 #100MB
      patch:
        operation: INSERT_BEFORE
        value: # lua filter specification
          name: envoy.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              local gWhiteList = {"/oauth"}

              function process(request_handle)
                  local xff_header = request_handle:headers():get("X-Forwarded-For")
                  local first_ip = string.gmatch(xff_header, "(%d+.%d+.%d+.%d+)")();
                  request_handle:headers():add("X-Real-IP", first_ip);

                  local method = request_handle:headers():get(":method")
                  if method=="POST" then
                  local path = request_handle:headers():get(":path")
                  local isInWhiteList = false
                  for _, whiteName in ipairs(gWhiteList) do
                      if string.find(path, whiteName) then
                      isInWhiteList = true
                      break
                      end
                  end

                  if isInWhiteList then
                  else
                    local accessToken = request_handle:headers():get("Authorization")
                    if accessToken ~= nil then
                      accessToken = "AccessToken=" .. string.sub(accessToken, 8, string.len(accessToken))
                    else
                      local body = request_handle:body()
                      if body ~= nil then
                        local len = body:length()
                        if len > 0 then
                          local content = body:getBytes(0, (len > 8192) and 8192 or len)
                          local contentType = request_handle:headers():get("Content-Type")
                          if string.find(contentType, "application/x-www-form-urlencoded", 1, true) then
                            local func_itor = string.gmatch(content, "AccessToken=[^&]+")
                            accessToken = func_itor()
                          elseif string.find(contentType, "multipart/form-data", 1, true) then
                            local func_itor = string.gmatch(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                            local result = func_itor()
                            if result ~= nil then
                                accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                            elseif len > 8192 then
                              content = body:getBytes(len - 8192, 8192)
                              func_itor = string.gmatch(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                              result = func_itor()
                              if result ~= nil then
                                accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                              end
                            end
                          end
                        end
                      end
                    end

                    if accessToken == nil then
                      accessToken = ""
                    end

                    local ok ,e = pcall(function()
                      -- Build a request for our authenticaiton service before passing request upstream
                      local auth_host = "service-account.default.svc.cluster.local"
                      local cluster = "outbound|8082||" .. auth_host

                      local authentication_request = {
                          [":method"] = "POST",
                          [":path"] = "/auth/validate",
                          [":authority"] = auth_host,
                          ["Content-Type"] = "application/x-www-form-urlencoded;charset=utf-8"
                      }

                      local response_headers, response_body = request_handle:httpCall(
                          cluster,
                          authentication_request,
                          accessToken,
                          5000
                      )

                      local userId = response_headers["internal-id"]
                      if userId ~= nil then
                        local roleIds = response_headers["internal-roles"]
                        local isAdmin = response_headers["internal-admin"]
                        request_handle:headers():add("Internal-Id", userId);
                        request_handle:headers():add("Internal-Roles", roleIds);
                        request_handle:headers():add("Internal-Admin", isAdmin);
                      else
                        request_handle:respond(
                                        {[":status"] = response_headers[":status"],
                                        ["Content-Type"] = "application/json;charset=utf-8"
                                        },
                                        response_body
                                )
                      end
                    end)
                    if not ok then
                      request_handle:respond(
                                      {[":status"] = 503,
                                      ["Content-Type"] = "application/json;charset=utf-8"
                                      },
                                      "Service Unavailable"
                              )
                    end
                  end
                      -- local content = ""
                      -- for key, value in pairs(request_handle:headers()) do
                      -- content = content .. key .. "=" .. value .. "&"
                      -- end
                  end
              end

              function envoy_on_request(request_handle)
                  process(request_handle)
              end
    - applyTo: HTTP_FILTER
      match:
        listener:
          portNumber: 8443
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
      patch:
        operation: MERGE
        value:
          per_connection_buffer_limit_bytes: 10485760
      patch:
        operation: INSERT_BEFORE
        value: # lua filter specification
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              local gWhiteList = {"/oauth"}

              function process(request_handle)
                  local xff_header = request_handle:headers():get("X-Forwarded-For")
                  local first_ip = string.gmatch(xff_header, "(%d+.%d+.%d+.%d+)")();
                  request_handle:headers():add("X-Real-IP", first_ip);

                  local method = request_handle:headers():get(":method")
                  if method=="POST" then
                  local path = request_handle:headers():get(":path")
                  local isInWhiteList = false
                  for _, whiteName in ipairs(gWhiteList) do
                      if string.find(path, whiteName) then
                      isInWhiteList = true
                      break
                      end
                  end

                  if isInWhiteList then
                  else
                    local accessToken = request_handle:headers():get("Authorization")
                    if accessToken ~= nil then
                      accessToken = "AccessToken=" .. string.sub(accessToken, 8, string.len(accessToken))
                    else
                      local body = request_handle:body()
                      if body ~= nil then
                        local len = body:length()
                        if len > 0 then
                          local content = body:getBytes(0, (len > 8192) and 8192 or len)
                          local contentType = request_handle:headers():get("Content-Type")
                          if string.find(contentType, "application/x-www-form-urlencoded", 1, true) then
                            local func_itor = string.gmatch(content, "AccessToken=[^&]+")
                            accessToken = func_itor()
                          elseif string.find(contentType, "multipart/form-data", 1, true) then
                            local func_itor = string.gmatch(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                            local result = func_itor()
                            if result ~= nil then
                                accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                            elseif len > 8192 then
                              content = body:getBytes(len - 8192, 8192)
                              func_itor = string.gmatch(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                              result = func_itor()
                              if result ~= nil then
                                accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                              end
                            end
                          end
                        end
                      end
                    end

                    if accessToken == nil then
                      accessToken = ""
                    end

                    local ok ,e = pcall(function()
                      -- Build a request for our authenticaiton service before passing request upstream
                      local auth_host = "service-account.default.svc.cluster.local"
                      local cluster = "outbound|8082||" .. auth_host

                      local authentication_request = {
                          [":method"] = "POST",
                          [":path"] = "/auth/validate",
                          [":authority"] = auth_host,
                          ["Content-Type"] = "application/x-www-form-urlencoded;charset=utf-8"
                      }

                      local response_headers, response_body = request_handle:httpCall(
                          cluster,
                          authentication_request,
                          accessToken,
                          5000
                      )

                      local userId = response_headers["internal-id"]
                      if userId ~= nil then
                        local roleIds = response_headers["internal-roles"]
                        local isAdmin = response_headers["internal-admin"]
                        request_handle:headers():add("Internal-Id", userId);
                        request_handle:headers():add("Internal-Roles", roleIds);
                        request_handle:headers():add("Internal-Admin", isAdmin);
                      else
                        request_handle:respond(
                                        {[":status"] = response_headers[":status"],
                                        ["Content-Type"] = "application/json;charset=utf-8"
                                        },
                                        response_body
                                )
                      end
                    end)
                    if not ok then
                      request_handle:respond(
                                      {[":status"] = 503,
                                      ["Content-Type"] = "application/json;charset=utf-8"
                                      },
                                      "Service Unavailable"
                              )
                    end
                  end
                      -- local content = ""
                      -- for key, value in pairs(request_handle:headers()) do
                      -- content = content .. key .. "=" .. value .. "&"
                      -- end
                  end
              end

              function envoy_on_request(request_handle)
                  process(request_handle)
              end
    - applyTo: HTTP_FILTER
      match:
        listener:
          portNumber: 32497
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: MERGE
        value:
          per_connection_buffer_limit_bytes: 209715200 #100MB
      patch:
        operation: INSERT_BEFORE
        value: # lua filter specification
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function process(request_handle)
                  local xff_header = request_handle:headers():get("X-Forwarded-For")
                  local first_ip = string.gmatch(xff_header, "(%d+.%d+.%d+.%d+)")();
                  request_handle:headers():add("X-Real-IP", first_ip);

                  local method = request_handle:headers():get(":method")
                  if method=="POST" then
                  local path = request_handle:headers():get(":path")
                  if string.find(path, "/Login") or string.find(path, "/oauth") then
                  else
                      local accessToken = request_handle:headers():get("Authorization")
                      if accessToken ~= nil then
                        accessToken = "AccessToken=" .. string.sub(accessToken, 8, string.len(accessToken))
                      else
                        local body = request_handle:body()
                        if body ~= nil then
                        local len = body:length()
                        if len > 0 then
                            local content = body:getBytes(0, (len > 8192) and 8192 or len)
                            local contentType = request_handle:headers():get("Content-Type")
                            if string.find(contentType, "application/x-www-form-urlencoded", 1, true) then
                              accessToken = string.match(content, "AccessToken=[^&]+")
                            elseif string.find(contentType, "application/json", 1, true) then
                              accessToken = string.match(content, "AccessToken=[^&]+")
                            elseif string.find(contentType, "multipart/form-data", 1, true) then
                              local result = string.match(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                              if result ~= nil then
                                accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                              elseif len > 8192 then
                                content = body:getBytes(len - 8192, 8192)
                                result = string.gmatch(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                                if result ~= nil then
                                  accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                                end
                              end
                            end
                          end
                        end
                      end

                      if accessToken == nil then
                        accessToken = ""
                      end

                      local ok ,e = pcall(function()
                        -- Build a request for our authenticaiton service before passing request upstream
                        local auth_host = "service-auth.default.svc.cluster.local"
                        local cluster = "outbound|8081||" .. auth_host

                        local authentication_request = {
                            [":method"] = "POST",
                            [":path"] = "/auth/validate",
                            [":authority"] = auth_host,
                            ["Content-Type"] = "application/x-www-form-urlencoded;charset=utf-8"
                        }

                        local response_headers, response_body = request_handle:httpCall(
                            cluster,
                            authentication_request,
                            accessToken,
                            5000
                        )

                        local userId = response_headers["internal-id"]
                        if userId ~= nil then
                          local roleIds = response_headers["internal-roles"]
                          local isAdmin = response_headers["internal-admin"]
                          request_handle:headers():add("Internal-Id", userId);
                          request_handle:headers():add("Internal-Roles", roleIds);
                          request_handle:headers():add("Internal-Admin", isAdmin);
                        else
                          request_handle:respond(
                                          {[":status"] = response_headers[":status"],
                                          ["Content-Type"] = "application/json;charset=utf-8"
                                          },
                                          response_body
                                  )
                        end
                      end)
                      if not ok then
                        request_handle:respond(
                                    {[":status"] = 503,
                                    ["Content-Type"] = "application/json;charset=utf-8"
                                    },
                                    "Service Unavailable"
                            )
                      end
                  end
                      -- local content = ""
                      -- for key, value in pairs(request_handle:headers()) do
                      -- content = content .. key .. "=" .. value .. "&"
                      -- end
                  end
              end

              function envoy_on_request(request_handle)
                  process(request_handle)
              end
    - applyTo: HTTP_FILTER
      match:
        listener:
          portNumber: 31400
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: MERGE
        value:
          per_connection_buffer_limit_bytes: 209715200 #100MB
      patch:
        operation: INSERT_BEFORE
        value: # lua filter specification
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function process(request_handle)
                  local xff_header = request_handle:headers():get("X-Forwarded-For")
                  local first_ip = string.gmatch(xff_header, "(%d+.%d+.%d+.%d+)")();
                  request_handle:headers():add("X-Real-IP", first_ip);

                  local method = request_handle:headers():get(":method")
                  if method=="POST" then
                  local path = request_handle:headers():get(":path")
                  if string.find(path, "/Login") or string.find(path, "/oauth") then
                  else
                      local accessToken = request_handle:headers():get("Authorization")
                      if accessToken ~= nil then
                        accessToken = "AccessToken=" .. string.sub(accessToken, 8, string.len(accessToken))
                      else
                        local body = request_handle:body()
                        if body ~= nil then
                        local len = body:length()
                        if len > 0 then
                            local content = body:getBytes(0, (len > 8192) and 8192 or len)
                            local contentType = request_handle:headers():get("Content-Type")
                            if string.find(contentType, "application/x-www-form-urlencoded", 1, true) then
                              accessToken = string.match(content, "AccessToken=[^&]+")
                            elseif string.find(contentType, "application/json", 1, true) then
                              accessToken = string.match(content, "AccessToken=[^&]+")
                            elseif string.find(contentType, "multipart/form-data", 1, true) then
                              local result = string.match(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                              if result ~= nil then
                                accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                              elseif len > 8192 then
                                content = body:getBytes(len - 8192, 8192)
                                result = string.gmatch(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                                if result ~= nil then
                                  accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                                end
                              end
                            end
                          end
                        end
                      end

                      if accessToken == nil then
                        accessToken = ""
                      end

                      local ok ,e = pcall(function()
                        -- Build a request for our authenticaiton service before passing request upstream
                        local auth_host = "service-account.default.svc.cluster.local"
                        local cluster = "outbound|8082||" .. auth_host

                        local authentication_request = {
                            [":method"] = "POST",
                            [":path"] = "/auth/validate",
                            [":authority"] = auth_host,
                            ["Content-Type"] = "application/x-www-form-urlencoded;charset=utf-8"
                        }

                        local response_headers, response_body = request_handle:httpCall(
                            cluster,
                            authentication_request,
                            accessToken,
                            5000
                        )

                        local userId = response_headers["internal-id"]
                        if userId ~= nil then
                          local roleIds = response_headers["internal-roles"]
                          local isAdmin = response_headers["internal-admin"]
                          request_handle:headers():add("Internal-Id", userId);
                          request_handle:headers():add("Internal-Roles", roleIds);
                          request_handle:headers():add("Internal-Admin", isAdmin);
                        else
                          request_handle:respond(
                                          {[":status"] = response_headers[":status"],
                                          ["Content-Type"] = "application/json;charset=utf-8"
                                          },
                                          response_body
                                  )
                        end
                      end)
                      if not ok then
                        request_handle:respond(
                                    {[":status"] = 503,
                                    ["Content-Type"] = "application/json;charset=utf-8"
                                    },
                                    "Service Unavailable"
                            )
                      end
                  end
                      -- local content = ""
                      -- for key, value in pairs(request_handle:headers()) do
                      -- content = content .. key .. "=" .. value .. "&"
                      -- end
                  end
              end

              function envoy_on_request(request_handle)
                  process(request_handle)
              end
    - applyTo: HTTP_FILTER
      match:
        listener:
          portNumber: 31400
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: MERGE
        value:
          per_connection_buffer_limit_bytes: 209715200 #100MB
      patch:
        operation: INSERT_BEFORE
        value: # lua filter specification
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function process(request_handle)
                  local xff_header = request_handle:headers():get("X-Forwarded-For")
                  local first_ip = string.gmatch(xff_header, "(%d+.%d+.%d+.%d+)")();
                  request_handle:headers():add("X-Real-IP", first_ip);

                  local method = request_handle:headers():get(":method")
                  if method=="POST" then
                  local path = request_handle:headers():get(":path")
                  if string.find(path, "/Login") or string.find(path, "/oauth") then
                  else
                      local accessToken = request_handle:headers():get("Authorization")
                      if accessToken ~= nil then
                        accessToken = "AccessToken=" .. string.sub(accessToken, 8, string.len(accessToken))
                      else
                        local body = request_handle:body()
                        if body ~= nil then
                        local len = body:length()
                        if len > 0 then
                            local content = body:getBytes(0, (len > 8192) and 8192 or len)
                            local contentType = request_handle:headers():get("Content-Type")
                            if string.find(contentType, "application/x-www-form-urlencoded", 1, true) then
                              accessToken = string.match(content, "AccessToken=[^&]+")
                            elseif string.find(contentType, "application/json", 1, true) then
                              accessToken = string.match(content, "AccessToken=[^&]+")
                            elseif string.find(contentType, "multipart/form-data", 1, true) then
                              local result = string.match(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                              if result ~= nil then
                                accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                              elseif len > 8192 then
                                content = body:getBytes(len - 8192, 8192)
                                result = string.gmatch(content, "name=\"AccessToken\"\r\n\r\n[^\r\n]+")
                                if result ~= nil then
                                  accessToken = "AccessToken=" .. string.sub(result, 23, string.len(result))
                                end
                              end
                            end
                          end
                        end
                      end

                      if accessToken == nil then
                        accessToken = ""
                      end

                      local ok ,e = pcall(function()
                        -- Build a request for our authenticaiton service before passing request upstream
                        local auth_host = "service-account.default.svc.cluster.local"
                        local cluster = "outbound|8082||" .. auth_host

                        local authentication_request = {
                            [":method"] = "POST",
                            [":path"] = "/auth/validate",
                            [":authority"] = auth_host,
                            ["Content-Type"] = "application/x-www-form-urlencoded;charset=utf-8"
                        }

                        local response_headers, response_body = request_handle:httpCall(
                            cluster,
                            authentication_request,
                            accessToken,
                            5000
                        )

                        local userId = response_headers["internal-id"]
                        if userId ~= nil then
                          local roleIds = response_headers["internal-roles"]
                          local isAdmin = response_headers["internal-admin"]
                          request_handle:headers():add("Internal-Id", userId);
                          request_handle:headers():add("Internal-Roles", roleIds);
                          request_handle:headers():add("Internal-Admin", isAdmin);
                        else
                          request_handle:respond(
                                          {[":status"] = response_headers[":status"],
                                          ["Content-Type"] = "application/json;charset=utf-8"
                                          },
                                          response_body
                                  )
                        end
                      end)
                      if not ok then
                        request_handle:respond(
                                    {[":status"] = 503,
                                    ["Content-Type"] = "application/json;charset=utf-8"
                                    },
                                    "Service Unavailable"
                            )
                      end
                  end
                      -- local content = ""
                      -- for key, value in pairs(request_handle:headers()) do
                      -- content = content .. key .. "=" .. value .. "&"
                      -- end
                  end
              end

              function envoy_on_request(request_handle)
                  process(request_handle)
              end